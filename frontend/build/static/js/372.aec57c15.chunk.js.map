{"version":3,"file":"static/js/372.aec57c15.chunk.js","mappings":"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","sources":["components/Register.js"],"sourcesContent":["import React, { useState } from 'react';\r\nimport axios from 'axios';\r\nimport { useNavigate } from 'react-router-dom';\r\n\r\nfunction Register() {\r\n  const [formData, setFormData] = useState({\r\n    name: '',\r\n    email: '',\r\n    password: '',\r\n    role: '',\r\n    phone: '',\r\n    otp: ''\r\n  });\r\n\r\n  const [errors, setErrors] = useState({\r\n    name: '',\r\n    email: '',\r\n    password: '',\r\n    role: '',\r\n    phone: '',\r\n    otp: ''\r\n  });\r\n\r\n  const [isOTPVerified, setIsOTPVerified] = useState(false);\r\n  const navigate = useNavigate();\r\n\r\n  const handleChange = (e) => {\r\n    setFormData({ ...formData, [e.target.name]: e.target.value });\r\n  };\r\n\r\n  const validateForm = () => {\r\n    let isValid = true;\r\n    const newErrors = {};\r\n\r\n    if (isOTPVerified) {\r\n      // Name validation\r\n      if (!formData.name) {\r\n        newErrors.name = 'Name is required.';\r\n        isValid = false;\r\n      } else if (!/^[A-Za-z\\s]+$/.test(formData.name)) {\r\n        newErrors.name = 'Name must contain only letters and spaces.';\r\n        isValid = false;\r\n      } else if (formData.name.length < 2 || formData.name.length > 50) {\r\n        newErrors.name = 'Name must be between 2 and 50 characters.';\r\n        isValid = false;\r\n      }\r\n\r\n      // Email validation\r\n      if (!formData.email) {\r\n        newErrors.email = 'Email is required.';\r\n        isValid = false;\r\n      } else {\r\n        const emailRegex = /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/;\r\n        if (!emailRegex.test(formData.email)) {\r\n          newErrors.email = 'Please enter a valid email address.';\r\n          isValid = false;\r\n        } else if (formData.email.includes('..') || formData.email.startsWith('.') || formData.email.includes('.@')) {\r\n          newErrors.email = 'Please enter a valid email address.';\r\n          isValid = false;\r\n        } else if (formData.email.split('@').length !== 2 || formData.email.split('@')[1].startsWith('-')) {\r\n          newErrors.email = 'Please enter a valid email address.';\r\n          isValid = false;\r\n        }\r\n      }\r\n\r\n      // Password validation\r\n      if (!formData.password) {\r\n        newErrors.password = 'Password is required.';\r\n        isValid = false;\r\n      } else if (formData.password.length < 6) {\r\n        newErrors.password = 'Password must be at least 6 characters.';\r\n        isValid = false;\r\n      }\r\n\r\n      // Role validation\r\n      if (!formData.role) {\r\n        newErrors.role = 'Role is required.';\r\n        isValid = false;\r\n      }\r\n    } else {\r\n      // Phone validation\r\n      if (!formData.phone) {\r\n        newErrors.phone = 'Phone number is required.';\r\n        isValid = false;\r\n      } else if (!/^[6-9]\\d{9}$/.test(formData.phone)) {\r\n        newErrors.phone = 'Phone number must be 10 digits and start with 6-9.';\r\n        isValid = false;\r\n      }\r\n\r\n      // OTP validation\r\n      if (!formData.otp) {\r\n        newErrors.otp = 'OTP is required.';\r\n        isValid = false;\r\n      }\r\n    }\r\n\r\n    setErrors(newErrors);\r\n    return isValid;\r\n  };\r\n\r\n  const handleSendOTP = async (isResend = false) => {\r\n    if (!/^[6-9]\\d{9}$/.test(formData.phone)) {\r\n      alert('Enter a valid 10-digit phone number starting with 6-9.');\r\n      return;\r\n    }\r\n    try {\r\n      console.log('Sending OTP to:', `${process.env.REACT_APP_API_BASE_URL}/api/auth/send-otp`); // Debug log\r\n      const response = await axios.post(`${process.env.REACT_APP_API_BASE_URL}/api/auth/send-otp`, { phone: formData.phone });\r\n      alert(isResend ? 'OTP resent successfully!' : 'OTP sent successfully!');\r\n      setFormData({ ...formData, otp: '' }); // Clear previous OTP input\r\n    } catch (err) {\r\n      if (err.response && err.response.data && err.response.data.message === 'Phone number already registered') {\r\n        alert('Phone number already registered!');\r\n      } else {\r\n        alert('Failed to send OTP!');\r\n      }\r\n    }\r\n  };\r\n\r\n  const handleResendOTP = () => {\r\n    handleSendOTP(true); // Call send OTP with resend flag\r\n  };\r\n\r\n  const handleOTPValidation = async () => {\r\n    try {\r\n      console.log('Verifying OTP at:', `${process.env.REACT_APP_API_BASE_URL}/api/auth/verify-otp`); // Debug log\r\n      const response = await axios.post(`${process.env.REACT_APP_API_BASE_URL}/api/auth/verify-otp`, {\r\n        phone: formData.phone,\r\n        otp: formData.otp\r\n      });\r\n\r\n      if (response.data.success) {\r\n        setIsOTPVerified(true);\r\n        alert('OTP verified successfully!');\r\n      } else {\r\n        alert('Invalid OTP');\r\n      }\r\n    } catch (err) {\r\n      alert('Error verifying OTP');\r\n    }\r\n  };\r\n\r\n  const handleSubmit = async (e) => {\r\n    e.preventDefault();\r\n\r\n    if (!validateForm()) {\r\n      return;\r\n    }\r\n\r\n    const { name, email, password, role, phone } = formData;\r\n\r\n    try {\r\n      console.log('Registering at:', `${process.env.REACT_APP_API_BASE_URL}/api/auth/register`); // Debug log\r\n      const response = await axios.post(`${process.env.REACT_APP_API_BASE_URL}/api/auth/register`, {\r\n        name,\r\n        email,\r\n        password,\r\n        role,\r\n        phone\r\n      });\r\n\r\n      alert('Registered successfully!');\r\n      navigate('/login');\r\n    } catch (err) {\r\n      alert('Registration failed. Try again!');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"register-container d-flex justify-content-center align-items-center\">\r\n      <div className=\"card p-4 shadow register-card\">\r\n        <h2 className=\"text-center mb-4\">Register</h2>\r\n\r\n        {!isOTPVerified ? (\r\n          <div>\r\n            <div className=\"mb-3\">\r\n              <input\r\n                type=\"text\"\r\n                name=\"phone\"\r\n                className=\"form-control\"\r\n                placeholder=\"Phone Number\"\r\n                value={formData.phone}\r\n                onChange={handleChange}\r\n                required\r\n              />\r\n              {errors.phone && <small className=\"text-danger\">{errors.phone}</small>}\r\n            </div>\r\n            <button type=\"button\" className=\"btn btn-primary w-100 mb-2\" onClick={handleSendOTP}>\r\n              Send OTP\r\n            </button>\r\n\r\n            <div className=\"mb-3 mt-3\">\r\n              <input\r\n                type=\"text\"\r\n                name=\"otp\"\r\n                className=\"form-control\"\r\n                placeholder=\"Enter OTP\"\r\n                value={formData.otp}\r\n                onChange={handleChange}\r\n                required\r\n              />\r\n              {errors.otp && <small className=\"text-danger\">{errors.otp}</small>}\r\n            </div>\r\n            <button type=\"button\" className=\"btn btn-success w-100 mb-2\" onClick={handleOTPValidation}>\r\n              Verify OTP\r\n            </button>\r\n            <button type=\"button\" className=\"btn btn-secondary w-100\" onClick={handleResendOTP}>\r\n              Resend OTP\r\n            </button>\r\n          </div>\r\n        ) : (\r\n          <form onSubmit={handleSubmit}>\r\n            <div className=\"mb-3\">\r\n              <input\r\n                name=\"name\"\r\n                className=\"form-control\"\r\n                placeholder=\"Name\"\r\n                value={formData.name}\r\n                onChange={handleChange}\r\n                required\r\n              />\r\n              {errors.name && <small className=\"text-danger\">{errors.name}</small>}\r\n            </div>\r\n            <div className=\"mb-3\">\r\n              <input\r\n                type=\"email\"\r\n                name=\"email\"\r\n                className=\"form-control\"\r\n                placeholder=\"Email\"\r\n                value={formData.email}\r\n                onChange={handleChange}\r\n                required\r\n              />\r\n              {errors.email && <small className=\"text-danger\">{errors.email}</small>}\r\n            </div>\r\n            <div className=\"mb-3\">\r\n              <input\r\n                type=\"password\"\r\n                name=\"password\"\r\n                className=\"form-control\"\r\n                placeholder=\"Password\"\r\n                value={formData.password}\r\n                onChange={handleChange}\r\n                required\r\n              />\r\n              {errors.password && <small className=\"text-danger\">{errors.password}</small>}\r\n            </div>\r\n            <div className=\"mb-4\">\r\n              <select\r\n                name=\"role\"\r\n                className=\"form-select\"\r\n                value={formData.role}\r\n                onChange={handleChange}\r\n                required\r\n              >\r\n                <option value=\"\">Select Role</option>\r\n                <option value=\"admin\">Admin</option>\r\n                <option value=\"vendor\">Vendor</option>\r\n                <option value=\"customer\">Customer</option>\r\n              </select>\r\n              {errors.role && <small className=\"text-danger\">{errors.role}</small>}\r\n            </div>\r\n            <div className=\"mb-3\">\r\n              <input\r\n                type=\"text\"\r\n                className=\"form-control\"\r\n                value={formData.phone}\r\n                readOnly\r\n                disabled\r\n              />\r\n            </div>\r\n            <div className=\"d-grid\">\r\n              <button type=\"submit\" className=\"btn btn-success\">Register</button>\r\n            </div>\r\n          </form>\r\n        )}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Register;"],"names":["formData","setFormData","useState","name","email","password","role","phone","otp","errors","setErrors","isOTPVerified","setIsOTPVerified","navigate","useNavigate","handleChange","e","target","value","handleSendOTP","async","isResend","arguments","length","undefined","test","console","log","axios","post","alert","err","response","data","message","_jsx","className","children","_jsxs","onSubmit","preventDefault","validateForm","isValid","newErrors","includes","startsWith","split","placeholder","onChange","required","type","readOnly","disabled","onClick","success","handleResendOTP"],"sourceRoot":""}